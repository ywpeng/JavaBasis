1.理论
1.1重要概念的理解
1.JAVA在程序运行时，在内存中划分5片空间进行数据的存储。分别是：1：寄存器。2：本地方法区。3：方法区。4：栈。5：堆。
2.栈（Stack）：基本数据类型、局部变量都是存放在栈内存中的，用完就消失。
栈内存特点，数数据一执行完毕，变量会立即释放，节约内存空间。
栈内存中的数据，没有默认初始化值，需要手动设置。
3.堆()：new创建的实例化对象及数组，是存放在堆内存中的，用完之后靠垃圾回收机制不定期自动消除。
堆内存中所有的实体都有内存地址值。
堆内存中的实体是用来封装数据的，这些数据都有默认初始化值。
堆内存中的实体不再被指向时，JVM启动垃圾回收机制，自动清除，这也是JAVA优于C++的表现之一（C++中需要程序员手动清除）。
4.双亲委派：当一个类收到了类加载请求，他首先不会尝试用自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类的加载中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。
采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object,不管是哪个加载器加载这个类，最终都是委托给顶层启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个Object对象。
5.Java的GC
Java会根据分代收集算法执行垃圾回收：
次数上频繁收集Young区；次数上较少收集Old区；基本不动元空间。
JVM在进行GC时，并非每一次都是对三个区域（Young、Old、Meta）一起回收的，大部分时候的回收都是指新生代。因此GC按照回收的区域又分为两种类型，一种是普通GC（minor GC）,一种是全局GC（major GC or Full GC）
6.Minor GC 和 Full GC的区别
普通GC（minor GC）:只针对新生代区域的GC，指发生在新生代的垃圾收集动作，因为大多数Java对象的存活率都不高，所以Minor GC非常频繁，一般回收速度也比较快。
全局GC（major GC or  Full GC）:指发生在老年代的垃圾收集动作，出现了Major  GC,经常会伴随至少一次的Minor GC(但并不是绝对的)。Major GC 的速度一般要比Minor GC 慢上10倍以上。
1.2 Java虚拟机内存管理
1.2.1虚拟机内存结构图

注意：JDK8之后没有了方法区了，换成了元空间。
注意：灰色区域线程独占；橙色区域线程共享，需要进行垃圾回收。
1.2.2非重点概念的介绍
1.类装载器ClassLoader
负责加载class文件，class文件再文件开头有特点的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。

Java虚拟机自带的加载器：
启动类加载器（Bootstrap）C++
扩展类加载器（Extension）Java
应用程序类加载器（AppClassLoader）：系统类加载器，加载当前应用的classpath的所有类。

用户自定义类加载器：
Java.lang.ClassLoader的子类，用户可以定制类的加载方式。

2.Native Interface本地接口
本地接口的作用是融合不同的编程语言为Java所用，他的初衷是融合C/C++程序，专门开辟的一块区域处理标记为native的代码（Thread.start方法中的start0方法就是本地方法）。该方法目前使用越来越少了。
3.Native Method Stack 本地方法栈
它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载本地方法库。与Java虚拟机栈的运行都是一致的，唯一的区别是：Java虚拟机栈为虚拟机执行Java方法服务，而本地方法栈为虚拟机执行native方法服务。
4.PC寄存器
每一个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储向下一条指令的地址，也即将要执行的指令代码），由执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。

这块内存区域很小，踏实当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。

如果执行的是一个Native方法，这个计数器是空的。

用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。不会发生内存溢出（OutOfMemory）错误。
5.Method Area 方法区
供线程共享的运行时内存区域。他存储了每一个类的结构信息(类的模板)。包括运行时常量池、字段和方法数据、构造函数和普通方法的字节码内容。
注意：上面的描述是规范，不同的虚拟机实现会不一样。例如JDK8以前是永久代（PermGen space）,JDK8以后是元空间（Metaspace）。
1.2.3重点概念的介绍
1.栈
栈管运行，堆管存储。栈的结构是先进后出（FILO）
栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，他的生命周期是跟随线程的生命周期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程一结束该栈就Over，生命周期和线程一致，是线程私有的。8种基本类型的变量+对象的应用变量+实例方法都是在函数的栈内存中分配。

另外一种描述：
虚拟机栈描述的是Java方法执行的动态内存模型
栈帧：每个方法执行，都会创建一个栈帧，伴随这方法从创建到执行完成。用于存储局部变量表，操作数栈，动态链接，方法出口等。
局部变量表：（1）.存放编译期可知的公众基本数据类型，引用类型，returnAddress类型。       （2）.局部变量表的内存空间在编译期完成分配，当进入一个方法时，这个方法需要在帧分配多少内存是固定的，在方法运行期间是不会改变局部变量表的大小
大小：当栈帧的内存大于Java虚拟机栈的内存时，会报StackOverflowError或OutOfMemoryError内存溢出问题

栈帧中主要保存3类数据：
本地变量（Local Variables）:输入参数和输出参数以及方法内的变量；
栈操作（Operand Stack）:记录出栈、入栈的操作；
栈帧数据（Frame Data）:包括类文件、方法等。

栈运行原理：
栈中的数据都是以栈帧（Stack Frame）的格式存在，栈帧是一个内存区块，是一个数据集，是一个有关方法（Method）和运行期数据的数据集，当一个方法A被调用时，就产生一个栈帧F1，并被压入到栈中，其他方法依次类推，按先进后出的方式执行，执行完毕就弹出栈帧。

每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调用直至执行完毕的过程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体的JVM实现有关，通常在256K-756K之间，约等于1Mb左右。

2.堆
是虚拟机中管理内存最大的一块区域。也是垃圾收集器主要的管理区域，主要存放对象实例等等。对新生代、老年代、Eden空间的处理。配置参数-Xmx-Xms就是控制堆存设置的参数。
一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，报错所有引用类型的真实信息，以便执行器执行。
堆内存逻辑上分为三部分：新生+养老+永久
新生区	Young Generation Space	Young/New
养老区	Tenure generation		Old/Tenure
永久区	Permanent Space		Perm

注意：JDK8以前是永久存储区，JDK8以后就是元空间了。

堆内存使用的简版介绍：
1.新建的对象会先进入Eden区，当Eden区满了时，会开启GC进行垃圾回收。
GC = YGC =	轻GC  ，进行垃圾回收后Eden基本全部清空。
Minor GC主要是从年轻代（包括Eden 和Survivor）清理垃圾。
2.当在伊甸区垃圾回收过程中还能多次存活的对象，就会进入幸存区；
幸存区一个是from区，一个是to区，两个区的叫法不固定，每次GC后会有交换。
   当在幸存区经过多次垃圾回收还能存活的对象，就会进入养老区。
3.如果养老区快满了，就会开启Full GC
Full GC = FGC,如果Full GC 多次垃圾回收对象依旧无法保存，就会报OOM的异常。
如果出现java.lang.OutOfMemoryError：Java heap space异常，说明Java虚拟机的堆内存不够。原因有二：
（1）Java虚拟机的堆内存设置不够，可以通过-Xms -Xmx来调整。
（2）代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用的情况）
4.Major GC vs Full GC 
Major GC 是清理老年代。 
Full GC 是清理整个堆空间—包括年轻代和老年代。 
 
如下原因会导致FullGC
· 年老代（Tenured）被写满
· 持久代（Perm）被写满 
· System.gc()被显示调用 
·上一次GC之后Heap的各域分配策略动态变化



永久存储区（Java8之前的）：
永久区是一个常驻内存区域，用于存放JDK自身所携带的Class,Interface的元数据，也就是说他存储的是运行环境必须的类信息，被装载进词区域的数据是不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占的内存。

3.堆+栈+方法区的交互关系
HotSpot是使用指针的方式来访问对象；
Java堆中会存放访问类元数据的地址；
reference(应用类型)存储的就直接是对象的地址

1.2.4 Java对象在JVM中的对应关系

1.3JVM的参数设置说明
1.3.1堆的内存结构说明
1.Java7的参数设置说明


2.Java8的参数设置说明

在Java8中，永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。
元空间与永久代之间的最大区别在于：永久代使用JVM的堆内存，但是Java8以后的元空间并不在虚拟机中而是使用的本机的物理内存。
因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory,字符串池和类的静态变量放入Java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制，而由系统的实际可用空间来控制。
1.3.2堆内存调优简介
-Xms:设置初始分配大小，默认为物理内存的 1/64
-Xmx:最大分配内存，默认为物理内存的 1/4
-XX:+PrintGCDetails:输出详细的GC处理日志
实际设置中必须将 Xms 与 Xmx设置成一样，避免GC和应用程序争抢内存，导致内存使用忽高忽低。

查看相关参数的代码如下：
public static void main(String[] args) {
   // 1.查看当前机器的处理器是几核的
   System.out.println("当前服务器核数：" + Runtime.getRuntime().availableProcessors());
   
   // 2.查看设置的JVM参数
   long maxMemory = Runtime.getRuntime().maxMemory();    //返回Java虚拟机试图使用的最大内存量
   long totalMemory = Runtime.getRuntime().totalMemory(); //返回Java虚拟机中的内存总量
   System.out.println("-Xmx:MAX_MEMORY = " + maxMemory + "(字节)=" + (maxMemory/(double)1024/1024) + "MB");
   System.out.println("-Xms:MAX_MEMORY = " + totalMemory + "(字节)=" + (totalMemory/(double)1024/1024) + "MB");
   }

在IDEA上配置JVM参数后设置Xmx 和 Xms都为1024m后，打印情况如下，可见：
堆内存的物理空间 = YoungGen + OldGen  ; metaspace使用的是本机的物理内存。


1.3.3 堆参数打印日志分析
1.GC参数示意


2.GC示例demo
示例demo1：
[GC (Allocation Failure) 
解析：伊甸园产生一次轻GC，内存分配失败了。
[PSYoungGen: 2007K->511K(2560K)] 2007K->823K(9728K), 0.0150010 secs] 
解析：【GC 前Young区占用内存2007->GC后Young区占用内511(新生代总占用2560)】
GC前堆内存占用2007->GC后堆内存占用823（堆内存总大小9728），Young区垃圾回收总耗时0.015
[Times: user=0.00 sys=0.00, real=0.02 secs]
解析：YoungGC时用户耗时0，YoungGC时系统耗时0，YoungGC时实际耗时0.02

示例demo2：


通过以上日志，可以分析出MimorGC的平均耗时、平均的频率（可通过数量多一些的GC日志，获得准确一些的平均值）。
如果MinorGC的平均时间大于系统要求，减少年轻代大小；
如果MinorGC的平均频率大于系统要求，增加年轻代大小；

3.Full GC参数示意

2.GC示例demo
示例demo1：本地的Full GC 打印
[Full GC (Allocation Failure) 
[PSYoungGen: 0K->0K(2048K)]
 [ParOldGen: 4487K->4467K(7168K)] 4487K->4467K(9216K),
 [Metaspace: 3247K->3247K(1056768K)], 0.0045102 secs] 
[Times: user=0.00 sys=0.00, real=0.01 secs]

示例demo2：


1.4 关于堆、栈分析的一个示例
代码【实例1-2】
public static void main(String[] args) {
    String s1 = "abc";
    String s2 = "abc";
         
    String s3 = new String("abc");
         
    System.out.println(s1 == s2);//true
    System.out.println(s1 == s3);//false
    System.out.println(s1 == s3.intern());//true
}

运行是常量池运行模型【示例1-3】

 
解读：
1.Java中创建两个变量s1,s2
           String s1 = "abc";
           String s2 = "abc";
2.程序执行到s1,s2时，Java虚拟机中栈内存开辟一块局部变量，而这块局部变量中存放了s1和s2两个变量
3.堆内存中就创建“abc”,“abc”两个实例,s1指向一个abc实例，s2指向另外一个“abc”实例
4.我们创建的每一个字符串的都会放到常量池里，所以方法区中就创建了一块常量池，在常量池中，我们可以想象有一张StringTable表，而它数据类型为一个HashSet集合，用来存放我们所实例化的对象，s1创建一个“abc”，就会放到HashSet中，创建一个就存放一个，而HashSet的特性是无序不可重复的，所以s1和s2创建的“abc”最后只存放了一个“abc”，所以s1和s2的对应地址显然是相同的（s1==s2的值是相等的）
5.再创建一个实例s3
          String s3 = new String("abc");
6.第5步创建的实例是我们手动直接创建，我们通过new创建出来的对象是直接放在堆内存里，所以就不用去考虑常量池的问题了。就直接在堆内存中开辟一块空间，将值直接赋给了s3，所以s3==s1或s2时，值是false的
7.当我们在s3加intern()方法时，s1==s3.intern()的值为true，因为intern()这个方法会把我们创建的“abc”区域，搬到运行时常量池里面去，产生一个运行时常量，所以s1==s3.intern()的值是true。
1.5 关于JMM的介绍

关于JMM的示例代码：

class MyThread{
	//测试一
//	int num = 10;
	//测试二
	volatile int num = 10;
	
	public void addTo100(){
		this.num = 100;
	}
}

/**
 * voiatile 是Java虚拟机提供的轻量级同步机制
 * 	1.保证可见性（通知机制）
 *  2.不保证原子性
 *  3.禁止指令重排
 *  
 * @author ASUS
 *
 *JMM： Java内存模型
 *特点：可见性、原子性、有序性
 */
public class VolatileTest {

	public static void main(String[] args) {
		MyThread m = new MyThread();
		//测试一：创建一个线程，去修改number的函数，看 main线程中是否会有通知
		//测试二：将 
		new Thread( () -> {
			System.out.println("A is coming,and A will sleep 3s first");
			try {
				Thread.sleep(3000);
				m.addTo100();
				System.out.println(Thread.currentThread().getName() + "将值该到了100");
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		},"A").start();
		
		while (m.num == 10) {
			
		}
		System.out.println("num已经被改了，main方法结束");
		
	}
}


2.JVM调优
2.1JDK自带的监控工具的使用

2.1.1 jconsole
1.位置


2.界面
测试代码：
/**
 * 测试使用JDK 自带的 jconsole 监控工具的使用
 * @author ASUS
 *
 */
public class JConsoleTest {
	
	/*
	 * 以下方式一 和方式二两种情况运行时 ，可对比堆内存使用情况的差别。
    * 主要是 成员变量和局部变量对堆内存使用的差别
	 */
	//方式一：
	private  byte[] a = new byte[256*1024];
	//方式二：
//	public JConsoleTest() {
//		  byte[] a = new byte[256*1024];
//	}

	public static void main(String[] args) {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		fill(1000);
	}
	
	private static void fill (int n) {
		List<JConsoleTest> jList = new ArrayList<JConsoleTest>();
		for (int i = 0;i < n; i++) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			jList.add(new JConsoleTest());
		}
	}
}


堆内存的使用情况如下：
以方式一运行时：

以方式二运行时：


Eden space使用情况：

2.2 JVM调优理论部分
2.2.1 调优指标
吞吐量：衡量系统在单位时间里完成的工作数量。
例子：这个应用需要每秒完成 2500 个事务。
响应时间、延迟时间：是衡量应用从接收到一个任务到完成这个任务锁消耗的 时间。
例子：系统处理一个http请求需要200ms,这个200ms就是系统的相应时间。
内存：衡量应用消耗的内存。这个内存占用是指应用在运行在某一个吞吐量、延迟以及可用性和易管理性指标小的内存消耗。
2.2.2 何时进行JVM调优
1.系统吞吐量与响应性能不高或下降
2.Heap内存（老年代）持续上涨达到设置的最大内存值
3.Full GC次数频繁
4.GC停顿时间过长（超过1s）
5.应用出现 OutOfMemory等内存异常
6.应用中有使用本地缓存且占用大量内存空间
2.2.3 JVM调优目标
调优的最终目的都是为了应用程序使用最新的硬件消耗来承载更大的吞吐量。jvm调优主要是针对垃圾收集器的手机性能优化，减少GC的频率和FullGC的次数，令运行在虚拟机上的应用能使用更少的内存以及延迟获取更大的吞吐量和减少暂停时间。
下面展示一些JVM调优的量化目标参考实例：
1.堆内存使用率 <= 70%
2.老年代内存使用率 <= 70%
3.avgpause <= 1秒
4Full GC次数0或 avg pause interval >= 24小时
2.2.4 JVM调优原则
1.优先原则
优先架构调优和代码调优，JVM是不得已的手段，但多数的应用不需要进行JVM优化。
2.2.5 JVM参数设置推荐
1.堆设置
参数-Xms和-Xmx,通常设置为相同的值，避免运行时要不断扩展JVM内存，建议扩大至3-4倍数FullGC后的老年代空间占用。
2.垃圾回收器设置



3.年轻代设置
参数-Xmn，1-1.5倍FullGC之后的老年代空间占用。
-Xmn = -XX:NewSize = -XX:MaxNewSize
避免新生代设置过小，当新生代设置过小时，会产生两种比较明显的现象，一是minor GC次数频繁，而是可能导致 minor GC 对象直接进入老年代。当老年代内存不足时，会触发Full GC。
避免新生代设置过大，当新生代设置过大时，会带来两个问题：一是老年代变小，可能导致Full GC频繁执行；二是minor GC执行回收的时间大幅度增加。

4.老年代设置
相应时间优先的应用：年老代使用并发收集器，所以其大小需要小心设置，一般要考虑并发会话率和会话持续时间等一些参数，如果堆设置小了，可能会造成内存碎片、高回收频率以及应用暂停而使用传统的标记清除方式；如果堆大了，则需要较长的收集时间。
吞吐量优先的应用：一般吞吐量优先的应用都有一个很大的年轻代和一个较小的年老代。原因是这样可以尽可能回收掉大部分短期对象，减少中期对象，而年老代尽存放长期存活对象。

5.永久代设置
基于jdk1.8,设置参数 -XX:MetaspaceSize和-XX:MaxMetaspaceSize（jdk 1.7版本，参数-XX:PermSize和-XX:MaxPermSize），通常设置为相同的值，避免运行时要不断扩展，建议扩大至1.2-1.5倍FullGC后的永久代空间(元空间)大小。

2.2.6 JVM参数分类
1.标准参数
不会随着jvm版本的变化而变化。
例如：
java -version 
java -jar
2.非标准参数
随着jvm 版本的变化可能会发生变化，通常以-X开头。可以通过命令 java -X来查看。
例如：
-Xmn
-Xms -Xmx
3.不稳定参数
主要是用于jvm调优和debug。通过以-XX开头。
（1）性能参数：用于jvm性能调优和内存分配控制，如内存大小；
（2）行为参数：用户改变jvm的基础行为，GC的方式和算法的选择
（3）调试参数：用户监控、打印、输出jvm的信息。

不稳定参数语法规则：
布尔类型参数：
-XX：+<option>      '+'代表启用，‘-’：代表关闭
-XX:UseG1GC
数字类型参数：
-XX：<opion>=<number>
-XX:MaxGCPauseMilis=500
字符串类型参数：
-XX:<option>=<number>
-XX:HeapDumpPath=./dump.core
2.2.7 JVM常用参数
-Xms:(memory start)初始化的对大小
-Xmx:(memory max)堆内存的最大值
-Xmn:年轻代的大小，官方推荐占堆的 3/8
-Xss:每个线程的堆栈带下，减少这个值可以生成更多的线程
-XX:NewRatio=4:年轻代/年老代
-XX:SurvivorRatio=8 年轻代中Eden与survivor的比值，

（jdk7）-XX:PermSize=100m:初始化永久代大小
（jdk7）-XX:MaxPermSize=256m：最大的永久代大小
-XX:MaxTenuringThreshold=15 这孩子垃圾的最大年龄
-XX:MaxDirectMemorySize=1G 直接内存（Direct buffer memor异常时可以调整这个值）
-XX:+DisableExplicitGC 禁止使用 System.gc() 去调用垃圾回收。

补充说明：

(图片来源于网络)

控制参数详解：
-Xms设置堆的最小空间大小。
-Xmx设置堆的最大空间大小。
-Xmn堆中新生代初始及最大大小（NewSize和MaxNewSize为其细化）。
-XX:NewSize设置新生代最小空间大小。
-XX:MaxNewSize设置新生代最大空间大小。
-XX:PermSize设置永久代最小空间大小。
-XX:MaxPermSize设置永久代最大空间大小。
-Xss设置每个线程的堆栈大小。
2.2.8 JVM调优步骤
1.监控分析
分析GC日志及dump文件，判断是否需要优化，确定瓶颈问题点，监控jvm的状况，可以使用阿里新开源的arthas,或者jconsole等工具查看运行状态。
如何生成GC日志和dump文件：




JVM参数的调优，是一个不断推导和尝试的过程，其中最重要的数据就是GC日志和Java堆内存快照，因此有两个基本点是一定要注意的：
在JVM参数中一定要设置-XX:+HeapDumpAfterFullGC和-XX:+HeapDumpOnOutOfMemoryError两个参数，可以在发送FGC和OOM的时候将当时的Java堆情况记录下来，用于事后分析；
GC日志要单独打印到一个日志文件中，方便分析，如果不特别设置则GC日志会打印到stdout.log中，和其他的日志混合在中间，影响后面的问题排查。

最后，JVM的参数调优并不是万能的，发生OOM或者FGC的时候，业务代码中也一定有不合理的地方，需要做合理的限制和优化，不能将所有的事情都交给JVM抗。

2.判断
如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化，如果GC时间超过1-3秒，或者频繁GC，则必须优化。
3.参数调整
调优一般是从满足程序的内存使用需求开始的，之后是时间延迟的要求，最后才是吞吐量的要求，要基于这个步骤来不断优化，每一个步骤都是进行下一步的基础，不可逆行之。
4.对比调优前后指标差异

5.重复以上过程


3.对JVM的深入理解
3.1关于对象的创建过程
对象创建时涉及的JVM动作如下：

1.给对象分配内存的方式
有指针碰撞和空闲列表两种方式。
指针碰撞：是指在堆内存中分配已使用和未使用两块区域，在新建对象的过程中，已使用的内存会变多，会导致指针的移动。
空闲列表：是指有时堆不一定就只分已使用和未使用两块，而是分成很多内存块。未使用的内存块就记录器编号在空闲列表中，一旦被使用就移除。
堆内存是使用指针碰撞还是空闲列表，是根据堆内存的具体情况来决定的。
（多线程情况下的指针移动或空闲列表维护，会出现并发情况下出错的情况）
2.线程安全性问题
方案一：线程同步。可以避免冲突，但是性能较差。
方案二：本地线程分配缓冲。
本地线程分配缓冲，即在堆内存中给每一个线程都分配一个区域。这样每个线程操作的内存都是独立的，就不会产生并发情况下冲突的问题。
3.2垃圾回收概述
1.如何判断对象为垃圾对象
方法一：引用计数法
方法二：可达性分析法

2.如何回收
回收策略：
策略一：标记-清除算法
策略二：复制算法
策略三：标记整理算法
策略四：分代收集算法

垃圾回收器
Serial:
Parnew:
Cms:
G1:
3.什么时候回收

3.3垃圾对象的判定
3.3.1引用计数法（了解，JVM基本上不用）
在对象中添加一个引用计数器，当有地方引用这个对象的时候，引用计数器就+1，当引用失效的时候，计数器就-1。
缺点：正常情况下栈内存的引用对象不再引用堆内存中创建的对象时，会正常判定为垃圾对象并进行垃圾回收。但如果堆内存中的对象有相互引用的情况时，此时就算栈内存的应用对象不再引用，就不会正常进行垃圾回收了。

补充说明：


在Eclipse中的Run Config中使用如下配置可以查看垃圾回收的相关信息：
-verbose:gc
-xx:+PrintGCDetail
操作如下：
1.Run as -> Run configuration 



2.编写测试的代码
public class PrintGCDetailTest {
	
	private Object instance;

	public static void main(String[] args) {
		//在Run Config中设置    -verbose:gc -XX:+PrintGCDetails可查看垃圾回收过程中的处理
		//p1对象在栈里，new的对象实例1在堆里
		PrintGCDetailTest p1 = new PrintGCDetailTest();
		//p2对象在栈里，new的对象实例2在堆里
		PrintGCDetailTest p2 = new PrintGCDetailTest();
		
		//让两个实例对象相互引用
		p1.instance = p2;
		p2.instance = p1;
		//断掉p1与实例1的引用关系
		p1 = null;
		//断掉p2与实例2的引用关系
		p2 = null;
		
		//主动 手动调用垃圾回收
		System.gc();
	}
}

注意：开发环境禁止使用 System.gc() 方法手动进行垃圾回收。
3.控制台打印的相关信息
[GC (System.gc()) [PSYoungGen: 2621K->720K(76288K)] 2621K->728K(251392K), 0.0254830 secs] [Times: user=0.00 sys=0.00, real=0.02 secs] 
[Full GC (System.gc()) [PSYoungGen: 720K->0K(76288K)] [ParOldGen: 8K->514K(175104K)] 728K->514K(251392K), [Metaspace: 2617K->2617K(1056768K)], 0.0033372 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
Heap
 PSYoungGen      total 76288K, used 655K [0x000000076b000000, 0x0000000770500000, 0x00000007c0000000)
  eden space 65536K, 1% used [0x000000076b000000,0x000000076b0a3ee8,0x000000076f000000)
  from space 10752K, 0% used [0x000000076f000000,0x000000076f000000,0x000000076fa80000)
  to   space 10752K, 0% used [0x000000076fa80000,0x000000076fa80000,0x0000000770500000)
 ParOldGen       total 175104K, used 514K [0x00000006c1000000, 0x00000006cbb00000, 0x000000076b000000)
  object space 175104K, 0% used [0x00000006c1000000,0x00000006c1080be0,0x00000006cbb00000)
 Metaspace       used 2624K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 280K, capacity 386K, committed 512K, reserved 1048576K


3.3.2可达性分析法（常用）
可达性分析算法是指，从GCRoot开始通过引用关系查找引用对象，整个关联关系形成引用链。分析完毕后，不再引用链中的对象就会被垃圾回收。
作为GCRoot的对象：虚拟机栈、方法区的类属性所引用的对象、方法区中常量所引用的对象、本地方法栈中所引用的对象
3.4垃圾回收策略
3.4.1标记-清除算法
该算法主要包括标记和清除两步。标记是使用 可达性分析法或引用计数法找到需要清理的内存，并进行标记；清除即对标记的垃圾进行清除。
缺点：
1.效率问题：标记和清除的性能不是很高
被标记的对象不是占用连续的存储空间，查找会耗时；
被标记的对象找不到时会再次触发垃圾回收，会影响性能。
2.空间问题。

优点：不需要额外空间
缺点：1.两次扫描，耗时严重；2.会产生内存碎片

3.4.2 复制算法
线程共享的区域：堆、方法区
线程独享的区域：栈、本地方法栈、程序计数器
其中堆内存是我们垃圾回收调度重点区域：分为新生代（重点关注）和老年代。
新生代的区域包括：
（1）Eden（伊甸园）：新创建的对象都会存在于Eden区域,垃圾回收重点关注。
（2）Survivor(存活区)：在Eden区域没有没回收的对象就会存在于Survivor区。
（3）Tenured Gen(老年区):多次存货与Survivor区域的对象就会存在于Tenured Gen ，垃圾回收较少关注。

复制算法会将内存区域一分为二，先先会在一片区域中分配内存，当有对象被垃圾回收后，会把剩下的对象复制到另外一片区域中，并且连续存储，有新对象来时连续分配空间，依次交替使用两个内存区域。复制算法主要是针对新生代垃圾回收的算法。

缺点：
1.虽然连续的存储解决寻址的效率问题，但是空间的时候会造成极大浪费，Survivor浪费了一般的内存。
2.极端情况下，如果对象的存活率很高，那么将所有对象复制一般，会花费很多时间。

复制算法的补充说明：







3.4.3 标记整理算法
该算法会将内存区域一分为二，第一步也是完成对需要垃圾回收的对象先做标记，然后做整理，整理的过程是把不需要回收的对象放一边，把需要回收的对象方另一边。这样整理后就是一边是有效的对象，另一边是需要回收的对象，最后垃圾回收的时候会比标记清除算法更加高效。改算法主要针对老年代的垃圾回收。





3.4.4 分代收集算法
分代收集算法并不是一个新的算法，是将复制算法和标记整理算法的一个结合。会针对新生代和老年代的垃圾回收，选择合适的算法。
年轻代（Young Gen）：
年轻代的特点是区域相对老年代较小，对象存活率低。
这种情况复制算法的回收整理，速度是最快的。复制算法的效率之和当前存活对象的大小有关，因而很适用年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。
老年代（Tenure Gen）：
老年代的特点是区域较大，对象存活率高。
该情况下存在大量存活率高的对象，复制算法明显变得不合适，一般是由标记清除和标记整理的混合实现。

3.4.5 垃圾回收算法的总结
内存效率：赋值算法>标记清除算法 > 标记整理算法（此处的效率是指时间复杂度）
内存整齐度：复制算法=标记整理算法 > 标记清除算法
内存利用率：标记整理算法=标记清除算法 > 复制算法

3.5垃圾回收器
3.5.1Serial收集器
是最基本，发展最悠久的收集器。单线程进行垃圾回收。
该收集器一般用户客户端（桌面应用）。
3.5.2ParNew收集器
多线程垃圾回收。
3.5.3Parallel Scavenge收集器
使用复制算法（针对新生代）的收集器。
是多线程垃圾回收器。
达到可控制的吞吐量。
吞吐量：CPU运行用户代码的时间域CPU消耗总时间的比值。
吞吐量= （执行代码的时间）/（执行用户代码的实际 + 垃圾回收所占用的时间）
-XX:MaxGCPauseMillis 垃圾收集器最大停顿时间
-XX:CGTimeRatio 吞吐量大小
3.5.4CMS收集器 Concurrent Mark Sweep
用于老年代的垃圾回收。
工作过程：初始标记、并发标记、重新标记、并发清理。
优点：并发收集、低停顿。
缺点：占用大量的CPU资源；无法处理浮动垃圾；出现Concurrent Mode Failure;空间碎片
3.5.5G1收集器
非常优秀，一般用于服务端。
优势：并行与并发；分代收集；空间整合；可预测的停顿。

4.内存分配
4.1分配策略
1.有限分配到Eden
2.大对象直接分配到老年代
3.长期存活的对象分配到老年代
4.空间分配担保（Eden区内存不够时区老年区借）
5.动态对象年龄判断
4.2对象优先分配到Eden的测试
示例代码如下：
public class EdenFirstTest {

	public static void main(String[] args) {
		byte[] b1 = new byte[5*1024*1024];
		System.out.println("优先将新创建的对象分配到Eden的测试");
	}
}

基于打印信息，可判定新创建的对象会分配的Eden区。

4.3 大对象直接进入老年代
-XX:PretenureSizeThreshold
通过以上参数指定一个范围，当对象的大小超过这个范围时，不会分配到Eden区，而是直接分配到老年代。
4.4 长期存活的对象将进入老年代
-XX:MaxTenuringThreshold
新生代在使用复制算法进行垃圾回收时，在每一次垃圾回收的过程中，如果对象没有被回收，就将Age计数器加1，当达到长期存活的判断标准时，就将该对象复制到老年代。
4.5空间分配担保
-XX:+HandlePromotionFailure
当新生代的空间不够用的时候，可以向老年代借空间。老年代需要判断是否有空间可以容纳所需的空间。
4.6逃逸分析与栈上分配
新建的对象一般在堆中分配，但也不一定全是在堆中分配，也可以在栈上分配。
栈上分配的好处：以栈你的方法对应的栈帧为例，执行方法进行入栈操作，方法执行完了就出栈，不需要垃圾回收，非常的高效灵活。
逃逸分析：分析对象的作用域。如果一个对象的作用域在方法体内部，方法执行结束对象生命周期结束，那个该对象就可以分配在栈上，方法执行完就可以进行垃圾回收。如果对象的作用域在方法体外部，则对象是逃逸的，不能分配在栈上。

5.虚拟机工具-JDK自带
5.1JDK自带工具-jps(使用频率最高)
jps:Java process status.主要用于查看Java的进程。
命令可查看本地虚拟机唯一ID（lvmid:local virtual machine id）,可对于任务管理器中的PID。

当同时运行着两个Java程序的时候：

其他显示更多信息的命令：
jps -l  	：显示运行程序的明细地址。

jps -m 	:显示运行时传入主类的参数，即Run Configuration中 Arguements中Praograments中设置的参数；
jps -v	:显示虚拟机参数，即Run Configuration中 Arguements中VM arguments中设置的参数
jps -mlv	：以上相关参数都显示。
5.2JDK自带工具-Jstat
（可参考的网页：https://blog.csdn.net/cockroach02/article/details/82670500）
用于监视虚拟机运行过程中的各种状态信息，包括类的装载、内存、垃圾收集、jit编译的信息。
需配合jps使用，通过jps获取的虚拟机ID，查看虚拟机的相关信息。
Jstat的官方介绍文档如下：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html

jstat命令的参数清单如下：

查询接口的参数：

通过以上命令和返回的结果，即可对各个区域、各代的情况进行监控。
每隔1s钟运行一次jstat,共运行10次：

5.3JDK自带工具-Jinfo
实时查看和调整虚拟机的各项参数。

5.4JDK自带工具-Jmap
有些命令在Windows下不支持，在Linux上是支持的。
用来查看堆内存使用状况，一般结合jhat使用。
5.5JDK自带工具-Jhat
Java Heap Analysis Tool ,jhat命令解析Java堆转储文件，并启动一个web server.然后用浏览器来浏览dump出来的Heap。
5.6JDK自带工具-Jstack
Java Stack Trace,Jstack是Java虚拟机自带的一种堆栈跟踪工具。jstack用于生成Java虚拟机当前时刻的线程快照。线程快照是Java虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等。
5.7JDK的图形化工具-JConsole
Jconsole内存监控
Jconsole线程监控
Jconsole死锁

6.虚拟机工具-Linux下
6.1 TOP

# top -S

6.2 vmstat
vmstat是Virtual Memory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。是对系统的整体情况进行统计，不足之处是无法对某个进程进行深入分析。
6.3 iostat
需安装。iostat:I/O statistics(输入/输出统计)的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动的统计情况，同时也会汇报出CPU使用情况。iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统整体情况进行分析。

6.4 pidstat
需安装。pidstat是sysstat工具的一个命令，用于监控全部或指定进程的CPU、内存、线程、设备IO等系统资源的占用情况。pidstat首次运行时显示自系统启动开始的各项统计信息，之后运行pidstat将显示自上次运行该命令以后的统计信息。用户可以通过指定统计的次数和时间来获得所需的统计信息。


7.虚拟机工具-第三方
7.1 VisualVM
开发大小Java应用程序的过程中难免遇到内存泄漏、性能瓶颈等问题，比如文件、网络、数据库的连接未释放、未优化的算法等。随着应用程序的持续运行，可能会造成整个系统运行效率下降，严重的会造成系统崩溃。为了找出程序中影藏的这些问题，在项目开发后期往往会使用性能分析工具来对应用程序的性能进行分析和优化。



7.2 MAT
MAT是一个强大的内存分析工具，可以快捷、有效的帮助我们找到内存泄漏，减少内存消耗分析工具。

7.3 GCViewer
7.4 Arthas
7.5 GChisto
7.6 IBM HeapAnylyzer
7.7GcEasy
1.简介
一款用于分析GC日志可视化分析的工具。
https://www.gceasy.io/

2.JVM Heap Size
这一部分分别使用了表格和图形界面来展示了JVM堆内存大小。如图所示：

左侧分别展示了年轻代的内存分配分配空间大小（Allocated）和年轻代内存分配空间大小的最大峰值（Peek），然后依次是老年代（Old Generation）、元数据区（Meta Space）、堆区和非堆区（Young + Old + Meta Space）总大小。值得注意的是，每一代的最大内存利用率都会超过分配的大小，但是图中的内存分配利用率已经超过了峰值内存了。

3.Key Performance Indicators
这一部分是关键的性能指标，如图：

Throughput表示的是吞吐量
Latency表示响应时间
Avg Pause GC Time 平均GC时间
Max Pause GC TIme 最大GC时间
4.Interactive Graphs

可查看不同年代的垃圾回收情况明细。

5.GC Statistics

左图：表示的是堆内存中Minor GC和Full GC回收垃圾对象的内存。
中图：总计GC时间，包括Minor GC和Full GC，时间单位为ms。
右图：GC平均时间，包括了Minor GC和Full GC。


以上4图分别表示的是总GC统计，MinorGC的统计，FullGC的统计，GC暂停程序的统计。
6.Memory Leak
此处可以诊断8种OOM中的5种（Java堆内存溢出，超出GC开销限制，请求数组大小超过JVM限制，Permgen空间，元空间）。

7.GC Causes

CG所花费的时间，也就是停顿线程的时间。












































































